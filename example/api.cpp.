#include "co_context.hpp"
#include "co_context/lazy_io.hpp"
#include "co_context/co/mutex.hpp"
#include "co_context/co/semaphore.hpp"
#include "co_context/task.hpp"
#include "co_context/net/acceptor.hpp"
#include "co_context/net/socket.hpp"
#include <chrono>
using namespace std::literals;

namespace view {
void ping();
} // namespace view

int server_list;

using namespace co_context;

semaphore sem{10};
mutex mtx;
auto ac = acceptor{inet_address{1234}};

task<int> demo() {
    // just similar with std
    co_await sem.acquire();
    if (sem.try_acquire())
        sem.release(2);
    else
        sem.release();

    co_await mtx.lock();
    mtx.unlock();

    // Don't worry about misuse. A warning will be reported.
    mtx.lock();

    // sync-style but async-performance
    char buf[4096];
    co_context::socket sock{co_await ac.accept()};
    co_await sock.recv(buf);

    // Coming in late April:
    // Select a server.
    auto [id, delay] = co_await when_any(server_list | view::ping);
    // Wait for 10 seconds, then send, then close.
    // This costs ONLY ONE SYSTEM CALL.
    co_await time_out(10s) + sock.send(buf) + sock.close();

    co_return 0;
}

int main() {
}